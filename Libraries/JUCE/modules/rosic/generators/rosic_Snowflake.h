#ifndef rosic_Snowflake_h
#define rosic_Snowflake_h

namespace rosic
{

/** Snowflake is a wavetable oscillator that uses stereo waveforms generated by Lindenmayer systems. 
When left and right channel are interpreted as x,y coordinates and plotted, the resulting curves 
show a self-similar character. The Koch snowflake is one simple example of such a curve. */

class Snowflake
{

public:


  //-----------------------------------------------------------------------------------------------
  // \name Setup

  /** Sets the sample-rate. */
  void setSampleRate(double newSampleRate);

  /** Sets the frequency (in Hz) of the sine to be generated. */
  void setFrequency(double newFrequency);

  /** Sets the number of iterations for the L-system. */
  void setNumIterations(int newNumIterations) { numIterations = newNumIterations; }


  void clearRules() { renderer.clearRules(); }

  void addRule(char input, const std::string& output) { renderer.addRule(input, output); }

  void setSeed(const std::string& newSeed) { seed = newSeed; }




  //-----------------------------------------------------------------------------------------------
  // \name Processing

  /** Renders the wavetable and updates related variables. */
  void updateWaveTable();

  /** Calculates one output-sample frame at a time. */
  INLINE void getSampleFrameStereo(double *outL, double *outR)
  {

  }

  void reset() {}
   // not yet implemented

protected:

  std::vector<double> x, y;

  LindenmayerRenderer renderer;

  int numIterations = 0;
  std::string seed;

};

}

#endif