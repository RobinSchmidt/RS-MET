Make ToolChain ready for release:
-consistently use MetaControlledParameter 
 -use callback based update of dsp objects (where possible)
-consistently use AutomatableSlider/Button/ComboBox
-AcidDevil
 -fix gui ugliness
-FuncShaper 
 -fix gui problems (try resizing)
-Straightliner:


Fix preset path problems for mac

Upgrade to juce 5.2.5
-figure out how we can avoid removing the "final" declaration from juce::Image

-rename:
 -BreakpointModulator: MultiStageEnvelopeGenerator (MSEG), short: MultiSegment - or MultiStage, MSEG



Bugs in the smoothing system:
 -with very long smoothing times (in the order of seconds), the slider is glitchy and when
  changing the module in ToolChain while smoothing, we get an access violation

-EchoLab
 -make save/recall work for snap, solo, selected


-drag scientific IIR filters into RAPT:
 -DircetForm, Linkwitz, CrossOver4Way, Ellitpic, QuadratureNetwork
 -get rid of typedef std::complex<T> Complex;
 -make 4-way crossover work (needs some updates, see commented code sections)
-drag convolutional filters into rapt
-drag more musical filters into rapt


For Multiband-effects:
 -drag over EngineersFilter, CrossOver, FiniteImpulseResponseFilter from rosic to rapt
 -make classes 
 -rsFilterBank: 
  -bank of parallel bandpasses (plus a lowpass and highpass band)
  -templatized on the filter type, the type needs a function like:
   setBandEdgeFrequencies(lower, upper) where lower can be 0 (for lowpasses) and upper can be
   inf (or fs/2) for highpasses, otherwise it will give a bandpass
  -splits the signal into low, high and any number of bandpass bands plus a residual given by
   residual = original - sum(bands)
  -processSampleFrame(T in, T* outs)
 -rsFilterTree:
  -hierarchical band-splitter based on pairs of low- and highpass filters
  -templatized on the splitter type (might be 1st or 2nd order IIR with perfect reconstruction, FIR
   or any other kind, like Linkwitz-Riley, etc.)
 -an FIR filter may have a function setOrder(K) which determines the length of the impulse response
  like N = 2^K (or 2^K-1, if odd order is desired)
or:
 -make a spectral splitter: one forward FFT, apply spectral windowing for filtering, multiple iFFTs
  -maybe look into baseclass rosic::SpectralProcessor
or:
 -use a bank of butterworth (or butterworth-squared) bandpasses, obtain magnitude response (or 
  pole-zero positions) of the sum filter and apply a compensation ("flattening") filter either
  pre-splitter or post-recombination
 -any poles and zeros inside the unit circle can be compensated by putting a zero/pole on the 
  respective pole/zero
 -if it has zeros outside the unit-circle, compensate them by using poles at positions that are 
  reflected in the unit circle

  

Smoothing-Sytem:
 -maybe provide a global scaler for all smoothing times in smoothing manager
 -provide a flag to temporarily switch off smoothing completely (useful for preset-switch)
  -done - now use it by calling smoothingManager->setBypassSmoothing(true/false); at start/end of
   all setStateFromXml overrides in all AudioModules
  -maybe it's needed also in createParameters?
 -maybe have a per-target smoothing bypass flag (useful for integer parameters that should still be
  meta-controlled and/or modulatable)
 -optimize addSmootherFor - smoothing filters don't need to recompute filter-coeffs, if the 
  settings are the same
 -maybe get rid of the isSmoothing flag, the smoother-pointer can serve as such flag as well
 -rsSmoothableParameter::setSmoothedValue should call callbacks without locking, same for the 
  overriden version in ModulatableParameter

ModSystem:
 -ModulatableSlider: show the modulation-range
 -clean up the files
 -BUG: when ladder cutoff is modulated and one then changes the resonance, this display shows
  the mod plot with modulated cutoff

Chainer:
 -make the size of the selector popup adequate
 -clean up code (remove obsolete code)

RayBouncer:
-give it some reference tuning (in default setting (unit circle, etc) the frequency
 should be exactly equal to incoming midi note)
-give it a resistance parameter that slows the ray down over time

-make work in Chainer:
 -AciDevil (done)
 -EngineersFilter (done)
 -Equalizer (done)
 -FuncShaper (done)
 -PitchShifter (done)
 -StereoDelay (done)
 -MultiAnalyzer (done)
 -MidiMonitor (done)
 -TrackMeter (done - check gui size/arrangement)
 -Straightliner (done...still some minor bugs)
 -Quadrifex (done - many effects still incomplete or buggy)
 -EchoLab (check Solo - mode)

 -AlgoVerb
 -Liberty
 -MagicCarpet
 -Moduluxury (obsolete with the new mod-system)
 -ChannelMatrix2x2
 -DspWorkbench
 -CrossOver (but how? it has 8 outputs, Chainer only 2)
 -SimpleSampler
 -KeyShot
 -Quadriga
 -Workhorse

Bugs:

FuncShaper:

Framework:
 -CoordinateSystem zoomer should zoom out maximally when clicking the middle button / mouse-wheel
 -big font incomplete
 -default colors are weird/wrong
 -bang/hit buttons don't flash - maybe they should operate on mouse-up an flash on as long as the
  the mouse is down
 -if you right click on a slider, then click elsewhere, you have to click twice to get the menu 
  back instead of clicking once
  -when the popup menu gets dismissed by clicking somewhere else, the popUpIsOpen flag will
   not be set to false
  -solution: we need a rPopUpMenuDismissed callback in RPopUpMenuObserver, make sure, it gets 
   properly called when a popup is dismissed, override the callback in AutomatableWidget and set
   the flag false there

EchoLab
 -has no custom gui
 -state recall triggers jassert

MultiAnalyzer
 -no horizontal scrollbar in scope (but might be intentional?)
 -integrate PhaseScope and TrackMeter, maybe have a 1D-2D side-by side display for the PhaseScope
 -Tabs: Plot (current scope), FFT, scope (phase-scope), Meters, spectrogram, histogram, filterbank,
  pitch, envelope, loudness-histogram
  Multi-Views
  -show several analyses at once (maybe select those relevant for sound-design, have a different 
   Multi-View for mix, mastreing, etc.)

-Straightliner bugs:
 -preset-dirty star is present after loading a preset
  -test this with other modules, too
   ->in Ladder, BreakpointModulator it works
   ->try it with other modules that have child-modules
 -colors are wrong

-MagicCarpet bugs:
 -gui messed up
 -some parameters missing
 -memory leaks on shutdown
 -probably doesn't produce sound yet (not tested)

-Quadrifex:
 -many effects incomplete

-MidiMonitor:
 -doesn't show events (maybe we need to override handleMidiMessage...or something)

-DspWorkbench
 -crashes when opening the editor
 
-SimpleSampler, KeyShot, Workhorse
 -gui messed up
 -memory leak on shutdown

-PhaseScope:
 -in 1D mode, the x-scaling should have no effect

Quadriga:
 -gui messed up





 replace things like:
 BitmapFont font = BitmapFontRoundedBoldA10D0::instance;
 with:
 const BitmapFont* font = &BitmapFontRoundedBoldA10D0::instance;
 and use the pointer for the text-drawing. otherwise a local object is created which gives rise to
 access violations on destruction of the local object


-introduce subtrees: Instruments, Effects, Filters, Analyzers, etc. for Chainer
 -look into Liberty or Quadrifex how this is done - it's in 
  EffectSelectionPopup::EffectSelectionPopup

-select one plugin where all the repetitive function overrides, i.e. those which are present in
 all effects/instrumnts are commented, delete the redundant comments elesewhere and refer to
 the AudiModule where the comments are in the class description.







-maybe move VectorMixer to basics?
-split VariousModules into VariousGenerators, VariousEffects, so we can move Quadrigen from 
 instruments to generators (it currently depends on VariousModules but would then only depend
 on VariousGenerators which may be included before)

-get rid of the lock parameter in constructor of PolyphonicInstrumentEditor (it's sufficient to pass
 the module - the editor can retrieve the lock from there)

make old plugins available in chainer:
we mostly need to provide a 2nd constructor that doesn't wrap an existing core-object but creates 
its own, provide a flag, whether or not the wrpeed object is owned and write a destructor that 
deletes the object conditionally, also an override of processBlock and createEditor is needed

-try to get romos (and Liberty) to compile on gcc

-EngineersFilter editor: remove additional space/infoline
-AciDevilEditor: needs other initial size, maybe should not be resizable
 
-turn rapt into a juce module (with no dependencies)
-make rapt and rosic test/demo projects
-maybe rename rosic to rs_dsp - or maybe raps (Rob's Audio Processing Suite) - jura needs no rename
 or: stay with rapt as rob's audio processing toolkit and have a rapt and a rapt_templates module
-get rid of "using namespace" in headers - lorcan says, this is something to be avoided
-templatize rosic classes and move templates to rapt
-in rapt: use omega instead of freq/sampleRate (avoid data redundancy)
-avoid name clashes with juce classes by using rs-prefix (perhaps on all rosic classes, at least on 
 those which clash with juce classes of the same name - but perhaps better for all for consistency)
-maybe rename RSlider, etc into rsSlider too - for consistency (it's important to that only after
 all old plugin code has been dragged over, otherwise compiler errors will be overwhelming
 when dragging over a new class)
-maybe we should generally use the rs prefix to be safe against later additions to juce
 -clients don't want to have to deal with name clashes when the incorporate my modules, so...
  yeah...prefix everything with rs - makes it also easier later to drag in code from RSLib

-make repaintOnMessageThread() work, use it for updating displays, widgets etc. when midi events 
 are received (they are received on the audio thread, but should update the GUI, too)

-clean up the BitmapFont static instance variable vs global object mess. get rid of global objects
 use the instance variables everywhere (because they can be used also across the dependent library 
 modules whereas the global objects are invisible


Bugs:
-on "Undo" in Reaper (to undo a parameter change), the widgets are not updated
 -Reaper's "Undo" calls AudioPlugin::setStateInformation, there is the line
  ParameterObserver::guiAutomationSwitch = false;
  which temporarily turns off receiving notifications for all widgets globally 
  and that's why the widgets don't update. i'm sure, what's the best way to 
  fix that ...why do we switch that off anyway...is was to solve some other 
  issue...figure out...



AudioPlugin:  

MetaParameters:
-make renamable via GUI 
-have an Auto-Rename feature (renames to assigned parameter's name)
-allow to optionally map midi controllers to meta-parameters
-fix updating of the frequency-response plot in the Ladder when parameters are automated

AudioModuleChain: use inherited childModules array instead of "modules"

RSlider: 
-make default-values and enter-value available on right-click (it's currently only
 available in subclass AutomatableSlider)


ParameterManager: rename functions to addParameter, removeParameter

State load/save widget set: click on textfield should open menu with files in current folder

GenericAudioModuleEditor: complete widget arrangement (buttons, boxes)

Enveloper:
-check, why it goes through release twice when there's no loop active
-maybe make a plugin that uses two or three envelopes to test the multi-editor
 (perhaps a dual ladder filter)

General:
-use the "virtual" qualifier for methods more conservatively - only when overriding is needed
-move more functions from public into protected, avoid acquiring mutex locks inside protected
 functions (they are supposed to be called from public functions which already hold the mutex)
-take more care about const correctness in declarations


Fix denormals once and for all, see:
https://en.wikipedia.org/wiki/Denormal_number#Disabling_denormal_floats_at_the_code_level
https://web.archive.org/web/20120225091101/http://phonophunk.com/articles/pentium4-denormalization.php
https://software.intel.com/en-us/articles/x87-and-sse-floating-point-assists-in-ia-32-flush-to-zero-ftz-and-denormals-are-zero-daz/
https://forum.juce.com/t/resolving-denormal-floats-once-and-for-all/8241
https://software.intel.com/en-us/node/523328
(done  in AudioPlugin::processBlock - but we may need to reset it)

for implementid SIMD vectors, see:
http://johanmabille.github.io/blog/2014/10/10/writing-c-plus-plus-wrappers-for-simd-intrinsics-3/
https://github.com/p12tic/libsimdpp