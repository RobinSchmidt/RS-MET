class responsibilities:

Module:
-main baseclass for all modules
-has suclasses ModuleContainer and ModuleAtomic (...rename to ContainerModule, AtomicModule)
-TopLevelModule is a subclass of ContainerModule
-all basic low-level, atomic modules are subclasses of AtomicModule
-the audio processing functions processFrame and processBlock are function pointers because the 
 container must be able to efficiently switch between block/frame and mono/poly processing - this
 way, it only needs to set the function-pointer when it makes the decision - no checks inside
 the processing function are necesarry
-that leads to a somewhat weird interface where one must write either a free (non-member) or static
 member function for the audio processing and assgin that function to the processing func-pointer
 instead of just overriding a member function....
-because this function is not a (non static) member-function, it gets the module for which it is
 called passed as first parameter (as replacement for the missing "this" point)
-to access member variables, the module pointer must be downcasted to the module subclass type
-the module programmer only needs to write a function that handles one sample of monophonic I/O,
 all other processing functions can then be generated automatically via preprocessor macros



AudioConnection:

-all signals are stored in the output buffers of modules, there are no additional explicit input
 buffers - and input of a module just stores a pointer to another module's output buffer
-for each input pin in the target object, there is a pointer stored, which refers to the memory 
 location of the output pin of the source module
 -each input pin of a target can connect to only one output pin of a source
 -to gather inputs, an explicit adder module is needed - this is for efficiency




Event:



EventConnection:







concrete modules:
arithmetic:


delays:


filters:

User Interface:
-uses mediator pattern to let the various gui areas (blocks-diagram editor, tree view, module gui 
 holder) communicate with each other without explicitly refering to each other


 //================================================================================================
 ok - it's looong ago that i touched that code - here i collect what i gather from the code 
 documentation

 class Module: 
 -each module has a number of named input pins and output pins

 double *audioOutputs;
   // each output pin has a memory location (type double) to store the current output value in, 


std::vector<AudioInputPinData> inputPins
  // stores information about the incoming connections

 -input pins do not have memory locations associated with them - when a module is processed, it 
  just collects all the signals it needs for its input via some stored pointers to the respective 
  memory locations of the connected output pins

-to create code for a new atomic module, use one of the macros
 CREATE_COMMON_DECLARATIONS_X where X stands for the number of inputs

