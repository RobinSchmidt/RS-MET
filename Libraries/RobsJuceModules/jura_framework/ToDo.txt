-in the free functions in GraphicsTools.h/cpp, remove all color parameters because they require 
 setting the color in th state of the juce::Graphics objects and we want to avoid calling 
 state-changing functions there because the caller may not expect such state changes and we don't 
 want to call saveState/restoreState there because they are potentially expensive and these drawing
 functions are supposed to be called a lot - they are low-level
-make the editors skinnable (background image, etc.)
-make the widgets skinnable (choose colors, fonts, images (.png or .svg), etc.)
-it should be possible to load skins at runtime or compile them into the binary
Idea: In all widgets that should be skinnable, use the "strategy" pattern for painting, for 
example, in RButton::paint delegate the actual painting to buttonPainter->paint(this, g), where
buttonPainter is the strategy object responsible for the actual painting. It is a pointer member
of the RButton class and of type RButtonPainter or some subclass thereof. The baseclass 
implementation would provide the default painting style and we could have subclasses 
RButtonPainterSVG, RButtonPainterPNG, etc. that use custom graphics. Or the baseclass would be
abstract and we would have a RButtonPainterDefault class which is used as fallback.The painter 
object can be assigned at runtime via RButton::setButtonPainter. The widget colour-scheme stuff 
would be moved into the RButtonPainterDefault class. ...or, maybe for easier backwards 
compatibility, we could by default let this strategy object be a nullptr and check in 
RButton::paint against nulltptr and invoke the painter object only if not null. A similar scheme
can be used for the editors - their painter objects could then be equipped with background images,
fonts, etc.





-maybe move some frameworkish classes down into RAPT (Parameter, AudioModule, 
 etc.) so they can be used from within other frameworks, too and use JUCE
 really only for the GUI and I/O (but not for managing parameters, etc.)
-reorganize the jura modules (in order of dependency):
 -jura_basics: basic tools and utilities, threading, etc.
 -jura_gui: drawing primitives, widgets, color-schemes, skins, etc.
 -jura_visualization: plots (functions, frequency responses, etc.), waveform displays
 -jura_audioprocessors: subclasses of juce::AudioProcessor and their editors
  -the only module that depends on RAPT
 -jura_daw: classes for building software with DAW-like functionality
  -does not specifically depend on jura_audioprocessors - don't treat our own processors 
   differently than generic subclasses of juce::AudioProcessor