-clean up the #includes - includes should ideally occur only in the unity build file
-get rid of using namespace declarations - warp the code itself into the appropriate namespace
 in the unity build file

-get rid of using rosic::rsString - use std::string consistently

-change meaning for the shape-parameter in the ADSR - make it range from -1..+1
 -maybe let the user select between various shape formulas (exp, trisaw-formulas, etc.) for 
  ->AttackShapeType, DecayShapeType, ReleaseShapeType editable via GUI and the numeric shape 
  parameters are module inputs (maybe gray out the sigmoidity input when it doesn't apply)
  AtBn: AttackBend, AtSg: AttackSigmoid
-maybe let the user dial in default values for disconnected pins on the gui

-create ModuleTypeInfo objects for container modules
 ->add them to the new factory
-maybe rename ModuleTypeInfo::description to helpText and reserve despcription for a more verbose
 explanantion (multiline text)
-descripion of pins in the infoline when the mouse is over the pin
-on the gui of modules that don't have parameters, show an info-text for this module describing the
 inputs, what it does, etc.
 

maybe keep a parent reference (NULL by default) 
 ->allows block processing for the top-level module 
 ->top-level module can acquire all mutexes for all child modules per block
   ->actually, we should use a single-mutex on the top-level module anyway, i.e. all modules share
     the same mutex and the top-level module aqcuires it once at the begin of each block

Modules:
-text - lets the user place arbitrary text fields on the structure view for comments, etc.
-pow (binary arithmetic)
-TimeSinceNoteOn/NoteDuration
-function-table - gui has various means to fill it (load file, breakpoint curve, formula, etc.)
-chek, what csound has - provide a similar set
-meter/scope/analyzer - should show a miniature version directly on the breadboard, gui can show
 larger version with controls
-sample-and-hold 
-quantize - gui lets user set the allowed levels
-table
-phasor
-table-osc
-send/receive - should get a number for the channel on which to send/receive (SendCh1, ReceiveCh2, 
 etc. - multiple senders on the same channel get added)
-alias
-tapped delayline (multi-out, returns x[n-1], x[n-2], etc., for building filters)
-function (single-in/single-out, multi-in/single-out FunctionN, multi-in/multi-out FunctionNM)
 gui lets user edit function - like in func-shaper, declare variable/input names, 
 number of inputs/outputs
-maybe the formula and tapped delayline can behave like AdderN - always provide an 
 additional pin when all are used up
-code fragment (angelscript? lua?)
-interpolating delayline - gui lets user choose interpolation
-sine osc - use most efficient implementation, no-phase-mod input
-TriSawOsc
-StateVectorFilter (can be used as sine-osc, too - maybe allow phase-mod)
 Ins: Freq, Q/bandwidth/decay/decay-speed/(1/Q) - whatever is most convenient or has the simplest
 formula, Type (Lowpass, Bandpass, DecayingSine/Reson (compare to csound))
-Bank of Attack/Decay-Sine filters, Inputs: Freq, Attack, Decay, Phase, Amplitude (maybe)
 gui lets user set up number of filters, scaling factors for each filter's parameters and maybe 
 allows to sava/load such settings
 -good for creating the body of acoustic instrument sounds
-some sort of transient generator


 



