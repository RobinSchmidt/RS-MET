---------------------------------------------------------------------------------------------------
Running tests and experiments:

Open: TestsRosicAndRapt.sln
in:   RS-MET\Tests\TestsRosicAndRapt\Builds\VisualStudio2019

and then in Main.cpp uncomment one or more lines for the experiment(s), you want to run (and 
comment any experiment that you don't want to run but is currently uncommented). Then compile and 
run, preferably in debug mode, unless you want to do performance tests. The unit- and performance 
tests will produce console output for the results. The experiments will produce wave-files in the 
project directory and/or use GNUPlotCPP to open a window with plots for the results (if you have 
GNUPlot installed and GNUPlotter correctly set up - the file is in rapt/Basics). Navigate to the 
code for a particular test by right-clicking on the function-call and using "Go To 
Definition/Declaration". If so desired, new tests and experiments can be added easily by just 
following the apparent pattern.


---------------------------------------------------------------------------------------------------
Running the unit tests for JURA:

Open: TestAppJURA.sln
in:   RS-MET\Products\Applications\TestAppJURA

...tbc...


---------------------------------------------------------------------------------------------------
Writing APE Scripts:

Open the JUCE PluginHost, for example, using AudioPluginHost.exe from 

  RS-MET\Products\Applications\AudioPluginHost\Builds\VisualStudio2017\x64\Release\App\

after you have built the project. Then plug in an APE instance and load the script with which you
want to work (or create a new one). My scripts are located in:

  RS-MET\Misc\APE Scripts

Wire up APE as desired. For filters and effects, I like to place a ToolChain instance in front of 
APE that runs a simple oscillator (for example using Straightliner) and place another instance of
ToolChain after APE for running some sort of analysis (oscilloscope, spectrum analyzer, etc.). 
Obviously, you may use different plugins for creating source signals and analyzing the output. For 
editing the script, it may be convenient to use an external text editor such as Notepad++, 
Visual Studio Code, Sublime, etc. For editing library code (rapt/rosic) in such a session, it may 
be a good idea to do that in Visual Studio, running the TestsRosicAndRapt.sln solution in parallel
and check occasionally if everything still compiles after the edits. Maybe also run occasionally 
the relevant unit tests (i.e. uncomment runUnitTestsRapt, etc. in Main.cpp). It's also useful to 
have Visual Studio open for navigating the library.



---------------------------------------------------------------------------------------------------
Testing ToolChain:


---------------------------------------------------------------------------------------------------
Update to a new JUCE version: