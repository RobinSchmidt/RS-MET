
-Instruments should add their own output to what's already there to enable layering
-Maybe instruments should also be able to use their input signal as source like an oscillator that 
 can be shaped by the filters and effects
-But how could we implement both? I think, maybe I should give instruments two additional sliders:
 -A pass-through volume slider
 -A slider fro mixing the input with the other oscillators
-Maybe don't mix instruments/effects with modulators in the same slot-chain - have a separate 
 slot-chain for the modulators instead.



Try to support LV2, see:
https://jatinchowdhury18.medium.com/building-lv2-plugins-with-juce-and-cmake-d1f8937dbac3
https://github.com/lv2-porting-project/JUCE
https://github.com/lvtk/jlv2
https://github.com/DISTRHO/JUCE


Bugs:

- [FIXED]
  Preset loading doesn't seem to work right. Load preset in any module, then switch to next. It 
  loads the wrong preset. It seems like loading a preset via the "Load" button does not affect the
  currentStateFile or something. Check FileManager::updateFileList() when it's called from
  StateFileManager::loadStateFromXmlFile and StateFileManager::saveStateToXmlFile
  Check if this bug also affects sample waveform loading in e.g. Straightliner -> Nope. Waveform 
  loading works almost fine. The only thing is that after initially when not yet any file was 
  loaded manually, the first click on the "Next" button loads the first file in the directory 
  instead of the next one according to the currently loaded one.
  It seems like after saving a preset, the skip buttons work right
  Make a unit test (State)FileManager::loadNextFile/loadPreviousFile


- [Might be fixed - needs tests inside some host]
  Here, someone says, that the sequencer in AcidDevil always runs at 140 bpm
  https://www.kvraudio.com/forum/viewtopic.php?p=7257577#p7257577
  https://www.kvraudio.com/forum/viewtopic.php?t=606099
  - This is not surprising because ToolChain itself currently has no mechanism in place to 
    retrieve the time-info from the host and pass it on to its sub-modules in the slots. 
  - Solution: Implement such a mechanism. Maybe by adding a virtual method setMidiTimeInfo to
    jura::AudioModule and in ToolChain::processBlock, retrieve the time-info from the host and
    loop over the slots to call that method to set it up. A refinement/optimization could be to do
    that only when at least one of the slots has a module that actually needs the time info (not 
    all do). That would require to keep track of that in the add/remove/replaceModule functions, 
    so it would be more code with more potential errors for later maintenance, so there's a 
    trade-off to be made: either always do that additinal loop thorugh all modules per block which 
    often may be unnecessary or tolerate some additional complication.
  - See: AudioProcessor::getPlayHead(), AudioPlayHead, AudioPlayHead::CurrentPositionInfo
  - There is some code in AudioPluginWithMidiIn::processBlock. We need to make sure that 
    ToolChainAudioModule::wantsTempoSyncInfo is true and implement 
    ToolChainAudioModule::setBeatsPerMinute
    ...soo - after all - there is actually already some infrastructure/mechanisam in place. It just
    needs to be used correctly.
  - OK - I added an implementation of ToolChain::setBeatsPerMinute ...that should perhaps solve it 
    when ToolChain is used as plugin. We still need some solution when it is used as Standalone. 
    Maybe liek in Surge: have an optional keyboard at the bottom and next to it some midi settings
    like tempo

- [DONE - Needs some more tests though]
  Look at the comments in AudioPluginWithMidiIn::processBlock in the block
    "if( wrappedAudioModule->wantsTempoSyncInfo ) {....}  "
  This block should probably be rewritten entirely.

- Quadrifex: set the routing to 1+2+3+4 and mute effect 4 - some parts of the graphics turn red 
   that shouldn't

- Quadrifex: load preset NonLinearReverb002. Gives access violation in 
  rsBiquadCascade<TSig, TCoef>::initBiquadCoeffs(). This seems to be reproducible. Write a unit test 
  that exposes this! It seems to happen in the constructor of FrequencyShifterStereoModule, so let's 
  write a unit test that constructs it (and maybe more)
  OK - the access violation is gone but we hit a jassert
  ToDo: use an enum class for listing the different effect algos in rosic::Quadrifex::effectAlgorithms




