---------------------------------------------------------------------------------------------------
Bugs

- Quadrifex: load preset NonLinearReverb002. We hit a jassert in getParameterByName with a 
  Parameter name DryWetRatio. It may be the Harmonics and/or the Reverb algo

- WaveOscillator: Initially when not yet any file was loaded manually, the first click on the 
  "Next" button loads the first file in the current directory instead of the next one according to 
  the currently loaded one. 

- [Might be fixed - needs tests inside some host]
  Here, someone says, that the sequencer in AcidDevil always runs at 140 bpm
  https://www.kvraudio.com/forum/viewtopic.php?p=7257577#p7257577
  https://www.kvraudio.com/forum/viewtopic.php?t=606099
  - This is not surprising because ToolChain itself currently has no mechanism in place to 
    retrieve the time-info from the host and pass it on to its sub-modules in the slots. 
  - Solution: Implement such a mechanism. Maybe by adding a virtual method setMidiTimeInfo to
    jura::AudioModule and in ToolChain::processBlock, retrieve the time-info from the host and
    loop over the slots to call that method to set it up. A refinement/optimization could be to do
    that only when at least one of the slots has a module that actually needs the time info (not 
    all do). That would require to keep track of that in the add/remove/replaceModule functions, 
    so it would be more code with more potential errors for later maintenance, so there's a 
    trade-off to be made: either always do that additinal loop thorugh all modules per block which 
    often may be unnecessary or tolerate some additional complication.
  - See: AudioProcessor::getPlayHead(), AudioPlayHead, AudioPlayHead::CurrentPositionInfo
  - There is some code in AudioPluginWithMidiIn::processBlock. We need to make sure that 
    ToolChainAudioModule::wantsTempoSyncInfo is true and implement 
    ToolChainAudioModule::setBeatsPerMinute
    ...soo - after all - there is actually already some infrastructure/mechanisam in place. It just
    needs to be used correctly.
  - OK - I added an implementation of ToolChain::setBeatsPerMinute ...that should perhaps solve it 
    when ToolChain is used as plugin. We still need some solution when it is used as Standalone. 
    Maybe like in Surge: have an optional keyboard at the bottom and next to it some midi settings
    like tempo

- Scope: Swicthing to sync and then back does not seem to update the saciing frequency to the old 
  value. When moving the ScanFreq slicer, we egt back to the old setting.

- In jura_ToolChain.cpp at the bottom, there is a list of more bugs that affect the whole 
  ToolChain. -> Move this list to here. Try to reproduce the crashes in a unit test in TestAppJURA.

---------------------------------------------------------------------------------------------------
Features

- Instruments should add their own output to what's already there to enable layering

- Maybe instruments should also be able to use their input signal as source like an oscillator that 
  can be shaped by the filters and effects. But how could we implement both? I think, maybe I 
  should give instruments two additional sliders:
  -A pass-through volume slider
  -A slider fro mixing the input with the other oscillators

- Maybe don't mix instruments/effects with modulators in the same slot-chain - have a separate 
  slot-chain for the modulators instead.

- Try to support LV2, see:
  https://jatinchowdhury18.medium.com/building-lv2-plugins-with-juce-and-cmake-d1f8937dbac3
  https://github.com/lv2-porting-project/JUCE
  https://github.com/lvtk/jlv2
  https://github.com/DISTRHO/JUCE

- Scope: let the envelope trigger the reset - good for viewing one-shots that should always start 
  left


---------------------------------------------------------------------------------------------------
Modules

- PhasyQ: Like EasyQ but with allpass filters. We could have different kinds of allpasses:
  1st order, 2nd order (biquad), allpass-delay, nested allpass-delay. How would a 2nd order 
  allpass delay work? Maybe it would be like the biquad but use x[n-M], x[n-M-1] instead of 
  x[n-1], x[n-2] and likewise for the delayed output y? Or maybe we need x[n-M], x[n-2*M]?
  Maybe each band/node could have itself a numStages parameter.


---------------------------------------------------------------------------------------------------
Improvements

- Quadrifex: the patches always contain for each slot a patch for every possible effect that 
  *could be* in the slot, regardless whether ot not it actually *is* in the slot. That's wasteful.
  Most of the time, the patch is in default state anyway, i.e. conatins no settings. Maybe make a 
  compromise: save the patch for the effect only if it contains (non-default) settings. Maybe write
  a containsPatchSettings() function that receives an xml patch. It should scan it (recursively) 
  for attributes and ignore the PatchFormat attribute. Save it only, if that function returns true.


---------------------------------------------------------------------------------------------------
Code Quality

- Use an enum class for listing the different effect algos in rosic::Quadrifex::effectAlgorithms.
  We should generally use enum classes for such options.


---------------------------------------------------------------------------------------------------
Cosmetic GUI issues (layout, appearance, etc.):

- Frequency displays have ticks at powers of two rather than (sub)multiples of 1 kHz

- In the Equalizer, there is some issue with the right border, I think. Also, the Range label is 
  cramped with the L/R or M/S buttons in stereo L/R and M/S mode

- Breakpoint modulator: the loop indicators are in an obtrusive yellow. This only affects the 
  "standalone" enve-gen editor - not the one used in Straightliner.

- Quadrifex: the routing menu is partially obscured by the routing graphics





