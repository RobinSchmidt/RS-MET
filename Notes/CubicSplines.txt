We have 8 datapoints x0,..,x7 and y0,..,y7 and want to find the cubic spline through these points.
Our polynomial segments and its first 2 derivatives are given by (Eq. 1):

  p_i(x)   = a_i + b_i*(x-x_i) + c_i*(x-x_i)^2 + d_i*(x-x_i)^3
  p_i'(x)  = b_i + 2*c_i*(x-x_i) + 3*d_i*(x-x_i)^2
  p_i''(x) = 2*c_i + 6*d_i*(x-x_i)

There are 7 of these segments, indexed 0,..,6. For these segments, we require (Eq. 2):
 
  p_i  (x_i)     = y_i                   i = 0,..,7  ->  function values match data at left node
  p_i  (x_{i+1}) = y_{i+1}               i = 0,..,6  ->  function values match data at right node
  p_i' (x_{i+1}) = p_{i+1}' (x_{i+1})    i = 0,..,6  ->  1st derivatives match at inner nodes
  p_i''(x_{i+1}) = p_{i+1}''(x_{i+1})    i = 0,..,6  ->  2nd derivatives match at inner nodes

The 1st line immediately implies that our a_i coefficients must be equal to the corresponding given
y_i values. Writing out the other 3 lines (thereby already replacing a_i by y_i) gives:

  p0(x1) = y0 + b0*(x1-x0) + c0*(x1-x0)^2 + d0*(x1-x0)^3
    ...
  p6(x7) = y6 + b6*(x7-x6) + c6*(x7-x6)^2 + d6*(x7-x6)^3

  p0'(x1) = p1'(x1) = b0 + 2*c0*(x1-x0) + 3*d0*(x1-x0)^2 = b1 + 2*c1*(x2-x1) + 3*d1*(x2-x1)^2
    ...
  p5'(x6) = p6'(x6) = b5 + 2*c5*(x6-x5) + 3*d5*(x6-x5)^2 = b6 + 2*c6*(x7-x6) + 3*d6*(x7-x6)^2
  
  p0''(x1) = p1''(x1) = 2*c0 + 6*(x1-x0) = 2*c1 + 6*(x2-x1)
    ...
  p5''(x6) = p6''(x6) = 2*c5 + 6*(x6-x5) = 2*c6 + 6*(x7-x6)
  
introducing: h_i = x_{i+1} - x_i for i = 0,..,6, this becomes shorter:

  p0(x1) = y0 + b0*h0 + c0*h0^2 + d0*h0^3
    ...
  p6(x7) = y6 + b6*h6 + c6*h6^2 + d6*h6^3
  
  p0'(x1) = p1'(x1) = b0 + 2*c0*h0 + 3*d0*h0^2 = b1 + 2*c1*h1 + 3*d1*h1^2
    ...
  p5'(x6) = p6'(x6) = b5 + 2*c5*h5 + 3*d5*h5^2 = b6 + 2*c6*h6 + 3*d6*h6^2
  
  p0''(x1) = p1''(x1) = 2*c0 + 6*h0 = 2*c1 + 6*h1
    ...
  p5''(x6) = p6''(x6) = 2*c5 + 6*h5 = 2*c6 + 6*h6

We could proceed by directly deriving a system of linear equations for the remaining unknown 
b_i, c_i, d_i coefficients. Instead, we set out to derive a system of equations for the slopes 
(i.e. 1st derivatives) s_i, i = 1,..,6 at all the inner datapoints (we will say something about the
endpoints with indices 0 and 7 later). These slopes can subsequently be used in a cubic Hermite
interpolation scheme, such that the Hermite interpolant will become the spline interpolant. They 
may also serve as numerical estimates for the 1st derivatives in an algorithm that works with 
numerical differentiation on data. Using any other numerical differentiation method to obtain 
slope values for cubic Hermite interpolation will, in general, only lead to a 1st order smooth 
interpolant (values and slopes match at the nodes) whereas this technique leads to a 2nd order 
smooth interpolant (curvatures match also). It may be noted that empirically, using a more 
common finite differencing approach to find target values for the slopes gave Hermite interpolants 
with less overshoot, so don't conclude, that this way of finding numerical slopes is better in
all applications. There's a tradeoff between smoothness and overshoot to be made here.

We note that the b_i coeffs must actually be equal to our (yet unknown) slope values s_i, so in the
following, we will also replace b_i by s_i (in addition to our replacement of a_i by the known 
y_i). From lines 2 and 3 of Eq. 2 together with our ansatz of Eq. 1, we have:

  y_{i+1} = y_i + s_i*h_i + c_i*h_i^2 + d_i*h_i^3
  s_{i+1} = s_i + 2*c_i*h_i + 3*d_i*h_i^2

Which we interpret as a system of 2 equations for c_i, d_i. We introduce z_i := y_{i+1} - y_{i}
for i = 0,...,6 and solve the 2x2 system for c_i, d_i (Eq. 3):

  c_i = ( 3*z_i - (2*s_i + s_{i+1})*h_i) / h_i^2
  d_i = (-2*z_i + (  s_i + s_{i+1})*h_i) / h_i^3

From line 4 of Eq 2: p_i''(x_{i+1}) = p_{i+1}''(x_{i+1}) together with line 3 of Eq 1: 
p_i''(x) = 2*c_i + 6*(x-x_i), we can derive:

  2*c_i + 6*d_i*h_i = 2*c_{i+1}    ...-> verify!

Plugging the expressions above for c_i, d_i into that leads (after some tedium) to:

    h_i*s_{i-1} + 2*(h_i + h_{i-1})*s_i + h_{i-1}*s_{i+1} 
  = 3*(z_{i-1}*h_i/h_{i-1} + z_i*h_{i-1}/h_i)

which is a tridiagonal system of equations for s1,...,s6. For the slopes s0,s7 at the boundary 
points, we are free to impose two more requirements. The system generally looks like:

  |m0 hm 0  0  0  0  0  0 |   |s0|   |r0|
  |h1 m1 h0 0  0  0  0  0 |   |s1|   |r1|
  |0  h2 m2 h1 0  0  0  0 |   |s2|   |r2|
  |0  0  h3 m3 h2 0  0  0 | * |s3| = |r3|
  |0  0  0  h4 m4 h3 0  0 |   |s4|   |r4|
  |0  0  0  0  h5 m5 h4 0 |   |s5|   |r5|
  |0  0  0  0  0  h6 m6 h5|   |s6|   |r6|
  |0  0  0  0  0  0  h7 m7|   |s7|   |r7|

where the elements of the right hand side vector are given by:

  r_i = 3*(z_{i-1}*h_i/h_{i-1} + z_i*h_{i-1}/h_i)   i = 1,..,6
  
the elements of the main diagonal are given by:

  m_i = 2*(h_i + h_{i-1})   i = 1,...,6

and the elements h0,...,h6 appear on the upper and lower diagonal. 

Boundary Conditions
-------------------

Now we turn to the question, where to get values from for elements with indices 0 and 7 and the 
strange hm element in the top left (for h_{-1}). We need to provide two additional requirements 
that determine how the spline will behave at the boundaries. In the simplest case, we could just 
prescribe values for the slopes s0 and s7 at the boundaries. That leads to what is called the 
"complete" spline and amounts to setting:

  m0 = 1, hm = 0, h7 = 0, m7 = 1, r0 = s0, r7 = s7

Another boundary condition known as the "natural" cubic spline requires the 2nd derivatives to 
vanish at the boundaries. We'll be a bit more general here and allow to prescribe arbitrary values 
k0 and k7 for the 2nd derivative at these boundaries. For the left boundary, we have:

  k0 = 2*c0                                2nd derivative of p0 at x0, p0''(x0), given
  c0 = (3*z0 - (2*s0 + s1)*h0) / h0^2      1st line of Eq. 3 with i=0

These two equations can be combined into a single equation involving s0 and s1 as unknowns by 
solving the 1st for c0 and plugging the result into the 2nd. This gives:

  2*s0 + s1 = 3*z0/h0 - k0*h0/2

from which we read off the matrix elements m0,hm and right-hand-side vector element r0:

  m0 = 2, hm = 1, r0 = 3*z0/h0 - k0*h0/2

For the right boundary, it gets a little more complicated because we need to use the p6'' equation
at x7, whereas before, we used the p0'' equation at x0, in which case another term became zero. Now
we have:

  k7 = 2*c6 + 6*d6*h6                      2nd derivative of p6 at x7, p6''(x7), given
  c6 = ( 3*z6 - (2*s6 + s7)*h6) / h6^2     1st line of Eq. 3 with i=6
  d6 = (-2*z6 + (  s6 + s7)*h6) / h6^3     2nd line ...

Now we have 3 equations that we need to turn into one involving s6 and s7 as unknowns. This tedium 
is relegated to appendix A. The result is:

  (1/(3*h6)) * s6 + (2/(3*h6)) * s7 =  z6/h6^2 + k7/6

from which we read off:

  h7 = 1/(3*h6), m7 = 2/(3*h6), r7 = z6/h6^2 + k7/6


  
  
Appendix A - Derivation of right boundary condition for natural spline:

Let's solve k7 = 2*c6 + 6*d6*h6 for c6:

  k7 = 2*c6 + 6*d6*h6  ->  (k7 - 6*d6*h6)/2 = c6

Plug that into the 2nd:

  (k7 - 6*d6*h6)/2 = ( 3*z6 - (2*s6 + s7)*h6) / h6^2

Solve that for d6:
  
  2*(3*z6 - (2*s6 + s7)*h6)/h6^2 - k7 = -6*d6*h6
  (k7 - 2*(3*z6 - (2*s6 + s7)*h6)/h6^2) = 6*d6*h6
  ((k7 - 2*(3*z6 - (2*s6 + s7)*h6)/h6^2))/(6*h6) = d6
  
and plug it into the 3rd:

  ((k7 - 2*(3*z6 - (2*s6 + s7)*h6)/h6^2))/(6*h6) = (-2*z6 + (s6 + s7)*h6) / h6^3

OK - that's a mess, lets' use sage:

  var("k7 z6 s6 s7 h6")
  eq1 = ((k7 - 2*(3*z6 - (2*s6 + s7)*h6)/h6^2))/(6*h6) == (-2*z6 + (s6 + s7)*h6) / h6^3
  expand(eq1)
  
which gives:

  1/6*k7/h6 + 2/3*s6/h6^2 + 1/3*s7/h6^2 - z6/h6^3 == s6/h6^2 + s7/h6^2 - 2*z6/h6^3

and bring all known term to the right and all unknown terms (those involving s6 and s7) to the 
left:
 
   2/3*s6/h6^2 + 1/3*s7/h6^2 - s6/h6^2 - s7/h6^2 = - 2*z6/h6^3 - 1/6*k7/h6 + z6/h6^3

multiply by h6 and sort:

  2/3*s6/h6 - s6/h6 + 1/3*s7/h6 - s7/h6 = -2*z6/h6^2 + z6/h6^2 - 1/6*k7
 
and simplify

  (-1/(3*h6)) * s6 - (2/(3*h6)) * s7 =  -z6/h6^2 - k7/6
  (1/(3*h6)) * s6 + (2/(3*h6)) * s7 =  z6/h6^2 + k7/6

from which we read off:

  h7 = 1/(3*h6), m7 = 2/(3*h6), r7 = z6/h6^2 + k7/6
   
...tbc...

-Periodic boundary conditions:
 -i think, the user must give the spacing between the last datapoint x7 and the wrapped-around 
  first datapoint x0 (which aliases to x8) which goes into some sort of h7, so m7 = 2*(h7+h6) and
  m0 = 2*(h0+h7)?
 -the matrix gets nonzero top-right and bottom-left elements which requires application of the
  https://en.wikipedia.org/wiki/Sherman%E2%80%93Morrison_formula (see Weitz video on Bezier 
  splines https://www.youtube.com/watch?v=0oUo1d6PpGU 16:30)


References:

This derivation closely follows the one given in "Numerik - Eine lebendige und gut verständliche
Einführung mit vielen Beispielen" by Andreas Meister and Thomas Sonar, page 59f. We use a slightly
different notation that is hopefully simpler (no double-indexing for coeffs) and closer to an
implementation in languages with 0-based array indexing. ...there are also some mistakes in the 
book...tbc
