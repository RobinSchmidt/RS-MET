last inputs were: ...,3,4,5,6 and we have a bufIdex = 2 and do a switch from 1,3 to 2,2,
can be done in the test with:

std::vector<Settings> settings ={ {0, 1, 3}, {6, 2, 2} };
Vec x = rsLinearRangeVector(N, 1, N);


pre:
   n    0    1    2    3
S: 1   3,2  X,X  X,X  X,X
L: 3   4,3  5,0  6,1  X,X
B: 4   -7   -6    0   -8
       L1   L2   S0   L0       S0: index 0 in small heap, etc. (translations of keys)
       

(1) swap 4,3 with 6,1 (using the regular swap with modifying the buffer):

   n    0    1    2    3
S: 1   3,2  X,X  X,X  X,X
L: 3   6,1  5,0  4,3  X,X     4,3 and 6,1 were swapped
B: 4   -7   -8    0   -6      -6 and -8 were swapped
       L1   L0   S0   L2      
       

(2) float down 6,1 - this swaps it with 5,0

   n    0    1    2    3
S: 1   3,2  X,X  X,X  X,X
L: 3   5,0  6,1  4,3  X,X     6,1 and 5,0 were swapped
B: 4    -8  -7    0   -6      -7 and -8 were swapped, todo: -8 == L0 -> +1 == S1
       L0   L1   S0   L2


(3) place 4,3 at end of small heap:

   n    0    1    2    3
S: 2   3,2  4,3  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4    1   -7    0   -6        -8 renamed to +1
       S1!  L0!  S0   L1!       exclamation mark means: wrong, inconsistent

(4) float up the 4,3 - this swaps it with 3,2

   n    0    1    2    3
S: 2   4,3  3,2  X,X  X,X      3,2 and 4,3 were swapped
L: 2   5,0  6,1  X,X  X,X
B: 4    1   -7   -6    0       0 and -6 were swapped
       S1!  L0!  L1!  S0
       

This is the post state and this is inconsistent because the 3,2 node points to bufIdx 2
but at bufIdx 2, we find -6 == L1 instead of +1 == S1. Where did it go wrong? The desired 
state can be found by considering that each buffer key should still point to the same 
value as it did in the pre state. The heaps are actually ok, it is the buffer that is 
wrong. It should be:

  -7  -6   1   0
  L0  L1  S1  S0

with the irregular swap in remove, we get -7,-6,1,0 which is differently wrong. At some
point we must miss a swap that we should do or we do an extra swap somewhere. I think, it
must be in step1 or step 3, 2 and 4 are just the regular floatUp/Down movements that also
do during processing.

At (3), the state becomes inconsistent. I think, either before and/or after step (3), we 
need a couple of fix ups. But what exactly should we do? The desired, consistent state 
after step 3 should look like:

   n    0    1    2    3
S: 2   3,2  4,3  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4   -7   -6    0    1 
       L0   L1   S0   S1 
       
for comparison, her again the actual state:

   n    0    1    2    3
S: 2   3,2  4,3  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4    1   -7    0   -6        -8 renamed to +1
       S1!  L0!  S0   L1! 

what are the appropriate actions to go from state (3) to the desired state (3')? Or 
maybe we should manipulate the state (2) before taking the actions that lead to 
state 3? When we move the node 4,3 up into the small heap, maybe we should visit the
buffer index 3 it points to? There, we find -6 = L1, which is the 6,1 node, i.e. the
node that was previously at the end of the large heap (will this always be the case?).

The changes in the (translated) buffer going from (2) to (3) are due to re-interpretation 
- the numbers in the buffer themselves have not changed, only the translation does. It 
seems, the idea of re-interpreting those numbers is flawed - hmm, why did i expect it 
to work anyway? The buffer stores keys. When we move one element from the large to the 
small heap, i try to cater for the change in meaning by adpating the largeIndexOffset in 
the rsDoubleHeap2 class - but does this idea really work? 

How about doing away with the offset business? Then, the -7 would keep its meaning L1, 
which is the desired value. The -6 would still mean L2 which is now an invalid index.
-8 would still mean L0. Maybe we should re-key the node (4,3) that we moved to the small 
heap and also re-key the node that sits in the buffer at 3 - this is the node with key -6,
which is the now invalidated key. Maybe the right strategy is to go without offset and
re-keying two nodes: the moved node and the invalidated node. But what key should the 
invalidated node get? It'S the node 6,1 that originally was at the end of the large buffer,
before we switched it with the front element 4,3. Should it get the L0 key, i.e. -8? I 
think, we may have to re-key it before floating it down?

Hmmmm...i think, the whole idea may be doomed to fail - i actually think, all indices or
keys are invalidated...hmm...or not?

-----------------------------------------------------------------------------------------

OK - let's try the same case with the i-nS convention for the large heap indexing:

pre:
   n    0    1    2    3
S: 1   3,2  X,X  X,X  X,X
L: 3   4,3  5,0  6,1  X,X
B: 4    2    3    0    1

(1) swap 4,3 with 6,1 (leads to a swap of buffer cells 1,3, i.e. values 3,1):
   n    0    1    2    3
S: 1   3,2  X,X  X,X  X,X
L: 3   6,1  5,0  4,3  X,X
B: 4    2    1    0    3      -> consistent

(2) float down 6,1 - this swaps it with 5,0, buffer cells 0,1 get swapped
   n    0    1    2    3
S: 1   3,2  X,X  X,X  X,X
L: 3   5,0  6,1  4,3  X,X
B: 4    1    2    0    3      -> consistent

(3) place 4,3 at end of small heap:
   n    0    1    2    3
S: 2   3,2  4,3  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4    1    2    0    3      -> INconsistent
D: 4   1+1  2+1   0    1      -> desired

(4) float up the 4,3 - this swaps it with 3,2
   n    0    1    2    3
S: 2   4,3  3,2  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4    1    2    3    0 

In the desired state, we again want that each key/index in the buffer points to the 
same node as before in the pre-state, so we want:
   n    0    1    2    3
S: 2   4,3  3,2  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4    2    3    1    0

We must do some sort of fix up before and/or after step 3, but i don't know what and if 
it's even possible to find a rule that works in general. It could also be that one step 
is to be applied around step 1 and another around step 3. Let's see , how a consistent 
state 3 should look like:
   n    0    1    2    3
S: 2   3,2  4,3  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4    1    2    0    3      actual
D: 4    2    3    0    1      desired
Maybe we should follow 4,3 to buf[3], fix the value and follow the previous key, 
fix the value there, too, etc. until we reach a consistent node? But what's the 
worst case runtime for that? Naively it's linear but maye it's guranteed to stop 
earlier And is this guaranteed to fix all wrong keys or could we come accross a 
consistent node before all are fixed?


But i think, the inconsistency 
is due to the re-interpretation of all keys/indices. All keys in the large heap change 
their meaning, so there's no way that the nodes that are keyed but such keys with new
meaninig have stored the correct back-link without modifying them all. That's why i 
introduced the key-scheme that does not rely on subtracting nS - this avoids the 
meaning change of the keys...to some extent

A brute force O(N) method to restore consistency would be to loop through all the 
nodes n in the double-heap, thereby determining their key k and setting the value 
buf[n.bufIdx] to k. Write a function restoreConsistency

Could another level of indirection help?
-or maybe we should drag the offset business into rsDoubleHeap and use it there
-maybe we need to use (i + offset) % modulus
-if we increase the total length of the filter, the modulus should get 
 incremented
 
 

Let's look at state (3) again and see, if we can fix the wrongness of the
actual result by an offset and modulus:
 
(3)
   n    0    1    2    3
S: 2   3,2  4,3  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4    1    2    0    3      actual
D: 4    2    3    0   (1)     desired, the (1) can easily be set during the move

we go through the nodes in the order as they appear in the heap:

 v i  (v = node.value, i = node.bufIdx)
(3,2) -> i = 2 -> B[2] = 0 -> k = 0  = key(3,2) = 0  -> ok           k = key(B[i])
(4,3) -> i = 3 -> B[3] = 3 -> k = 3 != key(4,3) = 1  -> wrong
(5,0) -> i = 0 -> B[0] = 1 -> k = 1 != key(5,0) = 2  -> wrong
(6,1) -> i = 1 -> B[1] = 2 -> k = 2 != key(6,1) = 3  -> wrong

...so this is in state 3, that is: after the floatDown in the large heap and before the
floatUp in the small heap. I guess that means, any fixup strategy should be applied in 
between these steps. Let's try setting B[3] to one and incrementing the offset...


post state (again)

(4)
   n    0    1    2    3
S: 2   4,3  3,2  X,X  X,X
L: 2   5,0  6,1  X,X  X,X
B: 4    1    2    3    0 
D: 4    2    3    1    0






Let's try to not use the raw k but a mapped value m = f(k), for f(k), let's use 
the rule:

if(k < nS)

k % 2 (2 bcs nS = 2)

The idea is that the wrongness in (3) is due to re-interpretation of the k-values. We 
need to construct a function f(k), parametrized by nS, nL, that fixes up this 
re-interpretation. The function does not need to work for the 4,3 node, because for 
that, we can just change the value that is stored in B (we just compute the new key for 
it and then set B[3] accordingly). But for 5,0 and 6,1, it should work. How about using
(k-nS) % nL as large-heap-index for all keys in the large heap? hmm..nope..what about
using m = f(k) = k+1 iff k >= nS. That, together with fixing up B[3] would work in this 
case. Should we, in general, just increment an offset for the large-heap-indices, 
whenever a node gets moved from large to small and decrement it when a node is moved
from small to large? ..try it with another class rsDoubleHeap3

at which point should we increment the largeIndexOffset? before or after the floatUp?

let's try the rule:
if(large(k)) use (i-nS) % n
i = k % nS

if we use (i-1)%2 

-----------------------------------------------------------------------------------------
a slightly larger example:

std::vector<Settings> settings ={ {0, 2, 4}, {9, 3, 3} };   // switch at sample 9
Vec x = rsLinearRangeVector(N, 1, N);

(0) pre:
   n    0    1    2    3    4    5
S: 2   5,4  4,3  _,_  _,_  _,_  _,_
L: 4   6,5  7,0  9,2  8,1  _,_  _,_
B: 6    3    5    4    1    0    2

(1) swap 6,5 with 8,1 and associated buffer values:
   n    0    1    2    3    4    5
S: 2   5,4  4,3  _,_  _,_  _,_  _,_
L: 4   8,1  7,0  9,2  6,5  _,_  _,_
B: 6    3    2    4    1    0    5      -> consistent

(2) float down 8,1 - swaps it with 7,0 with associated buffer swap:
   n    0    1    2    3    4    5
S: 2   5,4  4,3  _,_  _,_  _,_  _,_
L: 4   7,0  8,1  9,2  6,5  _,_  _,_
B: 6    2    3    4    1    0    5      -> consistent

(3) place 6,5 at end of small heap:
   n    0    1    2    3    4    5
S: 3   5,4  4,3  6,5  _,_  _,_  _,_
L: 3   7,0  8,1  9,2  _,_  _,_  _,_
B: 6    2    3    4    1    0    5      -> inconsistent
D:      3    4    5    1    0    2      -> desired

3 types of buffer keys:
(S) keys refering to the small heap (0,1): 
    -they are unchanged and remain valid
(L) keys refering to the large heap (2,3,4): 
    -they are to small by one
    -fix by incrementing offset for large heap indices
(M) key refering to the moved node 6,5 (5): 
    -"randomly" (?) off
    -fix by setting it directly to desired value nS = 2

-----------------------------------------------------------------------------------------
an even larger example:

std::vector<Settings> settings ={ {0, 3, 5}, {9, 4, 4} };
Vec x = rsLinearRangeVector(N, 1, N);

(0) pre:
   n    0    1    2    3    4    5    6    7
S: 3   4,3  3,2  2,1  _,_  _,_  _,_  _,_  _,_
L: 5   5,4  6,5  8,7  9,0  7,6  _,_  _,_  _,_
B: 8    6    2    1    0    3    4    7    5

(1) swap 5,4 with 7,6 and associated buffer values:
   n    0    1    2    3    4    5    6    7
S: 3   4,3  3,2  2,1  _,_  _,_  _,_  _,_  _,_
L: 5   7,6  6,5  8,7  9,0  5,4  _,_  _,_  _,_
B: 8    6    2    1    0    7    4    3    5

(2) float down 7,6 - swaps it with 6,5 with associated buffer swap:
   n    0    1    2    3    4    5    6    7
S: 3   4,3  3,2  2,1  _,_  _,_  _,_  _,_  _,_
L: 5   6,5  7,6  8,7  9,0  5,4  _,_  _,_  _,_
B: 8    6    2    1    0    7    3    4    5      -> consistent

(3) place 5,4 at end of small heap:
   n    0    1    2    3    4    5    6    7
S: 4   4,3  3,2  2,1  5,4  _,_  _,_  _,_  _,_
L: 4   6,5  7,6  8,7  9,0  _,_  _,_  _,_  _,_
B: 8    6    2    1    0    7    3    4    5      -> incosistent
D: 8    7    2    1    0    3    4    5    6      -> desired
T:      L    S    S    S    M    L    L    L      -> type

(4) float up the 5,4:
   n    0    1    2    3    4    5    6    7
S: 4   4,3  3,2  2,1  5,4  _,_  _,_  _,_  _,_
L: 4   6,5  7,6  8,7  9,0  _,_  _,_  _,_  _,_
B: 8    6    2    3    1    0    3    4    5

problem:  the key 3 appears twice in the buffer - we can't really use the size of 
          the number to identify large-heap keys (L-keys)
solution: use (again) the negative flag to indicate large-heap indices, we 
          can't rely on the number itself to make that distinction
 
so the full solution seems to be:
-use the sign bit to indicate large-heap keys (L-keys)
-use an offset for L-keys that gets incremented after step (2) (or 
 decremented if the signed representation is taken into account)
-set the buffer entry of the M-key after step (2)

let's play the same scenario through with this strategy:

(0) pre:
   n    0    1    2    3    4    5    6    7
S: 3   4,3  3,2  2,1  _,_  _,_  _,_  _,_  _,_
L: 5   5,4  6,5  8,7  9,0  7,6  _,_  _,_  _,_
B: 8   -5    2    1    0    3   -7   -4   -6

(3) after dblHp.incrementLargeIndexOffset(), assuming, we did buf[bi] = newKey1 after
   n    0    1    2    3    4    5    6    7
S: 4   4,3  3,2  2,1  5,4  _,_  _,_  _,_  _,_
L: 4   6,5  7,6  8,7  9,0  _,_  _,_  _,_  _,_
B: 8   -5    2    1    0    3   -8   -7   -6  
T:     L3   S2   S1   S0   S3   L0   L1   L2    -> translation, meaning

yay! that's consistent!!! :-) ..even without offset! how can that be?

(4) after dblHp.small.insert(n); 
   n    0    1    2    3    4    5    6    7
S: 4   5,4  4,3  2,1  3,2  _,_  _,_  _,_  _,_
L: 4   6,5  7,6  8,7  9,0  _,_  _,_  _,_  _,_
B: 8   -5    2    3    1    0   -8   -7   -6  
T:     L3   S2   S3   S1   S0   L0   L1   L2 

that's still consistent. YES! it works! 

-----------------------------------------------------------------------------------------
Now the case where we move a value from small to large

std::vector<Settings> settings ={ {0, 4, 4}, {9, 3, 5} };
Vec x = rsLinearRangeVector(N, -1, -N);

(0) pre:
   n    0    1    2    3    4    5    6    7
S: 4   6,5  7,6  9,0  8,7  _,_  _,_  _,_  _,_     the values are actually negative, but
L: 4   5,4  4,3  2,1  3,2  _,_  _,_  _,_  _,_     we omit the minus sign fo convenience
B: 8    2   -6   -5   -7   -8    0    1    3

(1) swap 6,5 with 8,7 and associated buffer values:
   n    0    1    2    3    4    5    6    7
S: 4   8,7  7,6  9,0  6,5  _,_  _,_  _,_  _,_ 
L: 4   5,4  4,3  2,1  3,2  _,_  _,_  _,_  _,_ 
B: 8    2   -6   -5   -7   -8    3    1    0

(2) float down 8,7 with associated buffer swaps via dblHp.small.extractFirst():
   n    0    1    2    3    4    5    6    7
S: 4   7,6  8,7  9,0  6,5  _,_  _,_  _,_  _,_ 
L: 4   5,4  4,3  2,1  3,2  _,_  _,_  _,_  _,_ 
B: 8    2   -6   -5   -7   -8    3    0    1
T:     S2   L2   L3   L1   L0   S3   S0   S1      -> consistent

(3) place 6,5 at end of large heap:
   n    0    1    2    3    4    5    6    7
S: 3   7,6  8,7  9,0  _,_  _,_  _,_  _,_  _,_ 
L: 5   5,4  4,3  2,1  3,2  6,5  _,_  _,_  _,_ 
B: 8    2   -6   -5   -7   -8    3    0    1
T:     S2   L2   L3   L1   L0   S3   S0   S1

B[5] is now wrong - it should be L4 instead of S3 - we can just set it











