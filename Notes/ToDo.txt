Create github projects for:
DSP, DAW, rosic, Plugin Framework, Documentation, Library organization
DSP: cols: synthesis, analysis, effects, modulation, 
 musical filters, technical filters, reverb (algo, convo), modulators, synthesis...maybe move
 snowflake as a card into there
Documentation: user manuals for ToolChain modules, pdf doc for rapt/rosic rendered by doxygen
Plugin Framework: parameters: modulation system, automation system

in the research repo, we could have projects for:
research papers, math book, tutorials ...maybe the latex source should go there

-write a commandline tool that makes advanced textual replacements in a bunch of files
-uses std::regex and std::filesystem to implement its functionality
-takes as commandline parameter a name of a script file, the script contains
 -a section that specifies which files should be edited based on
  -their names given as (one or more) regex expression(s), e.g. *.*
  -the patterns to search for together with their respective replacements
-it should create a new folder to write the modified files into, e.g. "_SourceTmp"
-after all files are finished, it renames the original folder to e.g. "SourceOld" and the temp
 folder into e.g. "Source"
-the use can the manually delet the "Old" folder after he has verified that the modifications did 
 not break anything (otherwise, he can just restore the old version by deleting the modified folder
 and renaming the original folder back to its original name
-use it to apply codebase-wide edits such as replacing all occurences of "rosic" with "RAMP" in all
 .h and .cpp files in rosic
-maybe also allow to rename the files in the process
-can be used to edit xml, sfz, h, cpp, etc. files
-maybe it could also somehow allow for numeric conversion like XmlBatchProcessor
-maybe make a GUI version or better: a GUI that invokes the commandline tool
 -maybe write it with wxWidgets



fix linker errors in win/gcc:
http://stackoverflow.com/questions/9329020/undefined-reference-to-sync-val-compare-and-swap-4-error-at-compilation-usi
-maybe updating gcc will help...

now i get a compiler error: 'sscanf' was not declared in this scope
#include <cstdio> added to juce_win32_ComSamrtPtr.h
fixed it

now i get linker errors related to flac codec code - seems like whenever the 
codec calls fprintf, it doesn't find the stdin, stdout, stderr things?
from stdio.h:
#define stdin	(&_iob[STDIN_FILENO])
#define stdout	(&_iob[STDOUT_FILENO])
#define stderr	(&_iob[STDERR_FILENO])
it doesn't seem to find the iob thing - we may have tell the linker to link a 
library that constains these symbols




-drag over the remaining GUI widget classes

make JUCE leaner:

The binaries for the JUCE based products are really big. Maybe we can reduce the bloat in the 
following way:
-in Libraries/JUCE create a 2nd subfolder modules_lean (or modules_stripped or whatever)
-copy over the folder contents of the original modules folder
-in each module folder, delete the guts and edit the master module header file to refer
 the includes to the original mdoule folder (this might potentially be a problem since
 the guts are not inside the module folder itself - if it turns out to be a problem,
 don't delete them and don't change the references)
-now that we have our own copy of the module folder, we can in each module include 
 h/cpp file pair comment out everything we don't need, thus we have a finer granularity of control
 over what gets compiled into the binary compared to leaving out completet modules (which may
 be not possible when we need a subset of some module)
-in the Projucer projects, set up the module path accordingly to use the modules 
 from the modules_lean folder
-this should reduce reduce the binary size and compilation time
  