We want an expression for the transfer function of the ladder filter of the form:

           1 + a                                     G4(z)
  G1(z) = ---------, G4(z) = (G1(z))^4, H(z) = -------------------
           1 + a/z                              1 + k * G4(z) / z

and we want it in canonical BA-form:

          b0 + b1/z + b2/z^2 + b3/z^3 + b4/z^4 + b5/z^5
  H(z) = -----------------------------------------------
          a0 + a1/z + a2/z^2 + a3/z^3 + a4/z^4 + a5/z^5
  
Sage:
var("z a k")
G1(z) = (1+a) / (1 + a*z)
G4(z) = G1^4
D(z)  = 1 + k*G4/z      # denominator
H(z)  = G4 / D
expand(D)

 a^4 * k / ((a^4*z^4 + 4*a^3*z^3 + 6*a^2*z^2 + 4*a*z + 1)*z) 
+ 4*a^3 * k / ((a^4*z^4 + 4*a^3*z^3 + 6*a^2*z^2 + 4*a*z + 1)*z) 
+ 6*a^2 * k / ((a^4*z^4 + 4*a^3*z^3 + 6*a^2*z^2 + 4*a*z + 1)*z) 
+ 4*a   * k / ((a^4*z^4 + 4*a^3*z^3 + 6*a^2*z^2 + 4*a*z + 1)*z) 
+         k / ((a^4*z^4 + 4*a^3*z^3 + 6*a^2*z^2 + 4*a*z + 1)*z) 
+ 1

Define:
  P(z) := (a^4*z^4 + 4*a^3*z^3 + 6*a^2*z^2 + 4*a*z + 1) * z
        = ((a+z)^4 + 1) * z
then:
  D(z) = 1*a^4 * k/P + 4*a^3 * k/P + 6*a^2 * k/P + 4*a^1 * k/P + 1*a^0 * k/P + 1
       = 1 + k * (1*a^0 + 4*a^1 + 6*a^2 + 4*a^3 + 1*a^4) / P(z)
       = 1 + k * (a+z)^4 / P(z)

It's a mess! But giving this (the final expression in last line):

  D(z) = 1 + k * G4 / z 
       = 1 + k * G1^4 / z 
       = 1 + k * (((1+a)/(1+a*z)))^4 / z 
       
to wolfram alpha gives:

          a^4 k + a^4 z^5 + 4 a^3 k + 4 a^3 z^4 + 6 a^2 k + 6 a^2 z^3 + 4 a k + 4 a z^2 + k + z
  D(z) = ---------------------------------------------------------------------------------------
                                            z (a z + 1)^4
                                            
which is more helpful. Define:

  p    := a^4 k   + 4 a^3 k   + 6 a^2 k   + 4 a k   + k  ?=  k * (a+1)^4
  q(z) := a^4 z^5 + 4 a^3 z^4 + 6 a^2 z^3 + 4 a z^2 + z  
        = z (a^4 z^4 + 4 a^3 z^3 + 6 a^2 z^2 + 4 a z + 1)
        = z (a z + 1)^4
  
then:

  D(z) = (p + q(z)) / (z (a z + 1)^4)
       = (p + q(z)) / q(z)
  
and therefore:

          G4(z) * q(z)
  H(z) = --------------
            p + q(z)
  
  Define the inverse of H:
  
             p + q(z)     
   I(z) = ------------- = ------
           G4(z) * q(z)
   
   


 or maybe try giving this: 
   ((1+a)/(1+a*z))^4 / (1 + k * (((1+a)/(1+a*z)))^4 / z)
 to wolfram alpha...yes - this gives:
 
 
                                           (a + 1)^4 z
   H(z) = ---------------------------------------------------------------------------------------
           a^4 k + a^4 z^5 + 4 a^3 k + 4 a^3 z^4 + 6 a^2 k + 6 a^2 z^3 + 4 a k + 4 a z^2 + k + z

                 (a + 1)^4 z
        = -----------------------------
           (a + 1)^4 k + z (a z + 1)^4
 
 ...yes! success! this looks like an useful expression for implementation. Oh - but that's only 
 valid for the LP_24 mode. For LP_24/18/12/6/0, we need to pass:
 
   ((1+a)/(1+a*z))^4 / (1 + k * (((1+a)/(1+a*z)))^4 / z)
   ((1+a)/(1+a*z))^3 / (1 + k * (((1+a)/(1+a*z)))^4 / z)
   ((1+a)/(1+a*z))^2 / (1 + k * (((1+a)/(1+a*z)))^4 / z)
   ((1+a)/(1+a*z))^1 / (1 + k * (((1+a)/(1+a*z)))^4 / z)
 
 giving different numerators, namely:
 
   (a + 1)^4 z (a z + 1)^0
   (a + 1)^3 z (a z + 1)^1
   (a + 1)^2 z (a z + 1)^2
   (a + 1)^1 z (a z + 1)^3
             z (a z + 1)^4 
             
  maybe we need to form linear combinations of these numerators with the coeffs c4,..,c0
  
  oh no - this is all wrong! we need 
              *                             *
   ((1+a)/(1+a/z))^4 / (1 + k * (((1+a)/(1+a/z)))^4 / z)
   
 doesn't work, but:
 
   ratexpand(  ((1+a)/(1+a/z))^4 / (1 + k * (((1+a)/(1+a/z)))^4 / z)  )
   
 gives:
                             (a + 1)^4 z^4
   H(z) = -----------------------------------------------------------
           a^4 + 4 a^3 z + 6 a^2 z^2 + z^3 ((a + 1)^4 k + 4 a) + z^4
           
                                 (a + 1)^4
        = -----------------------------------------------------------
           a^4/z^4 + 4*a^3/z^3 + 6*a^2/z^2 + ((a+1)^4*k + 4*a)/z + 1
   
Numerators: b := a+1
LP_24: b^4 z^4 (a+z)^0 = b^4 z^4 * (a^0                                            )
LP_18: b^3 z^3 (a+z)^1 = b^3 z^3 * (a^1 +       * z                                )
LP_12: b^2 z^2 (a+z)^2 = b^2 z^2 * (a^2 + 2*a   * z +       * z^2                  )
LP_6:  b^1 z^1 (a+z)^3 = b^1 z^1 * (a^3 + 3*a^2 * z + 3*a   * z^2 +       z^3      )
FLAT:  b^0 z^0 (a+z)^4 = b^0 z^0 * (a^4 + 4*a^3 * z + 6*a^2 * z^2 + 4*a * z^3 + z^4)

define b2 = b^2, b3 = b^3, etc, c0,..,c4 are the mixing coeffs, and collect coeffs:

z^4: c4*b4*a0 + c3*b3      + c2*b2      + c1*b1      + c0
z^3: c3*b3*a1 + c2*b2*2*a1 + c1*b1*3*a1 + c0*b0*4*a1
z^2: c2*b2*a2 + c1*b1*3*a2 + c0*b0*6*a2
z^1: c1*b1*a3 + c0*b0*4*a3
z^0: c0*b0*a4

define d0 = c0*b0, d1 = c1*b1, ...

z^4: d4*a0 + d3      + d2      + d1      + d0
z^3: d3*a1 + d2*2*a1 + d1*3*a1 + d0*4*a1
z^2: d2*a2 + d1*3*a2 + d0*6*a2
z^1: d1*a3 + d0*4*a3
z^0: d0*a4

factor out the a:

z^3: (d3 + d2*2 + d1*3 + d0*4) * a1
z^2: (d2 + d1*3 + d0*6) * a2
z^1: (d1 + d0*4) * a3


for the bilinear version:

b = (1+a)/2; G1(z) = (b+b/z)/(1+a/z); G4 = G1^4; H = G4/(1+k*G4/z); ratexpand(H)

b = (1+a)/2; G1(z) = (b+b/z)/(1+a/z); G4 = G1^4; H = G4/(1+k*G4/z); ratexpand(H)

exceeds standard computation time

Sage:

var("a z k")
b  = (a+1)/2
G(z) = (b+b/z)/(1+a/z)
G4   = G^4
H    = G4 / (1 + k*G4/z)
Hs = H.simplify_rational()
Hs

gives the following mess:

((a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*z^5 + 4*(a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*z^4 + 6*(a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*z^3 + 4*(a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*z^2 + (a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*z)
/
(((a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*k + 64*a)*z^4 + 16*z^5 + 4*(24*a^2 + (a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*k)*z^3 + 2*(32*a^3 + 3*(a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*k)*z^2 + (a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*k + 4*(4*a^4 + (a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*k)*z)

Define:

A := (a^4 + 4*a^3 + 6*a^2 + 4*a + 1) = (a+1)^4

then this simplifies to:

                          A*z^5 + 4*A*z^4 + 6*A*z^3 + 4*A*z^2 + A*z
----------------------------------------------------------------------------------------------------
16*z^5 + (A*k + 64*a)*z^4 + 4*(24*a^2 + A*k)*z^3 + 2*(32*a^3 + 3*A*k)*z^2 + 4*(4*a^4 + A*k)*z + A*k

...interesting - it's a 5-pole/5-zero filter

we also need the transfer functions after the 1st, 2nd, 3rd lowpass to form their weighted sum for
the expander-modes - for example, after the 3rd:

var("a z k")
b  = (a+1)/2
G(z) = (b+b/z)/(1+a/z)
H    = G^3 / (1 + k*G^4/z)
Hs = H.simplify_rational()
Hs

2*((a^3 + 3*a^2 + 3*a + 1)*z^5 + (a^4 + 6*a^3 + 12*a^2 + 10*a + 3)*z^4 + 3*(a^4 + 4*a^3 + 6*a^2 + 4*a + 1)*z^3 + (3*a^4 + 10*a^3 + 12*a^2 + 6*a + 1)*z^2 + (a^4 + 3*a^3 + 3*a^2 + a)*z)
/
((16*z^5 + A*k + 64*a)*z^4 + 4*(24*a^2 + A*k)*z^3 + 2*(32*a^3 + 3*A*k)*z^2 + 4*(4*a^4 + A*k)*z + A*k)

the denominator is (always) same, the numerators are:



define 
A  = (a+1)
A2 = (a+1)^2 =                 a^2 + 2*a + 1
A3 = (a+1)^3 =         a^3 + 3*a^2 + 3*a + 1
A4 = (a+1)^4 = a^4 + 4*a^3 + 6*a^2 + 4*a + 1 = A


G0 = 16*(a^4*z + 4*a^3*z^2 + 6*a^2*z^3 + 4*a*z^4 + z^5)

G1 = 8*((a + 1)*z^5 + (3*a^2 + 4*a + 1)*z^4 + 3*(a^3 + 2*a^2 + a)*z^3 + (a^4 + 4*a^3 + 3*a^2)*z^2 + (a^4 + a^3)*z)
   = 8*(A*z^5 + ((3*a+1)*A)*z^4 + 3*a*A2*z^3 + ((a+3)*A*a^2)*z^2 +  a^3*A*z)

var("a")
a4 = (3*a^2 + 4*a + 1).factor()
a2 = (a^4 + 4*a^3 + 3*a^2).factor()
a4, a2
  -> ((3*a + 1)*(a + 1), (a + 3)*(a + 1)*a^2)

G2 = 4*((a^2 + 2*a + 1)*z^5 + 2*(a^3 + 3*a^2 + 3*a + 1)*z^4 + (a^4 + 6*a^3 + 10*a^2 + 6*a + 1)*z^3 + 2*(a^4 + 3*a^3 + 3*a^2 + a)*z^2 + (a^4 + 2*a^3 + a^2)*z)
   = 4*(A2*z^5 + 2*A3*z^4 + (a^4 + 6*a^3 + 10*a^2 + 6*a + 1)*z^3 + 2*(a^4 + 3*a^3 + 3*a^2 + a)*z^2 + (a^4 + 2*a^3 + a^2)*z)
   = 4*(A2*z^5 + 2*A3*z^4 + ((a^2 + 4*a + 1)*A2)*z^3 + 2*(A3*a)*z^2 + A2*a^2*z)

var("a")
a1 = (a^4 + 2*a^3 + a^2).factor()
a2 = (a^4 + 3*a^3 + 3*a^2 + a).factor()
a3 = (a^4 + 6*a^3 + 10*a^2 + 6*a + 1).factor()
a1, a2, a3
  -> ((a + 1)^2*a^2, (a + 1)^3*a, (a^2 + 4*a + 1)*(a + 1)^2)

G3 = 2*(A3*z^5 + (a^4 + 6*a^3 + 12*a^2 + 10*a + 3)*z^4 + 3*A4*z^3 + (3*a^4 + 10*a^3 + 12*a^2 + 6*a + 1)*z^2 + A3*a*z)
   = 2*(A3*z^5 + ((a+3)*(a+1)^3)*z^4 + 3*A4*z^3 + ((3*a+1)*(a+1)^3)*z^2 + A3*a*z)
   = 2*(A3*z^5 + ((a+3)*A3)*z^4 + 3*A4*z^3 + ((3*a+1)*A3)*z^2 + A3*a*z)
  
var("a")
a2 = (3*a^4 + 10*a^3 + 12*a^2 + 6*a + 1).factor()
a4 = (a^4 + 6*a^3 + 12*a^2 + 10*a + 3).factor()
a2, a4
  -> ((3*a + 1)*(a + 1)^3, (a + 3)*(a + 1)^3)

where:

(   a^4 + 6*a^3 + 12*a^2 + 10*a + 3) = (a + 1)^3 (a   + 3) =   (a + 1)^4 + 2 (a + 1)^3
(3*a^4 + 10*a^3 + 12*a^2 +  6*a + 1) = (a + 1)^3 (3 a + 1) = 3 (a + 1)^4 - 2 (a + 1)^3


G4: A4*z^5 + 4*A4*z^4 + 6*A4*z^3 + 4*A4*z^2 + A4*z

---------------------------------------------------------------------------------------------------
Now the general ladder, using a constant u to control the zero (u == B1, but we want a 
one-letter name)

var("a z k u")
b1 = (a+1)*u
b0 = (a+1)*(1-u)
G(z) = (b0+b1/z)/(1+a/z)
H    = G^3 / (1 + k*G^4/z)  # replace G^3 by G^1, G^2, etc. to select the stage
Hs = H.simplify_rational()
Hs
#maxima.optimize(Hs)  

maxima.optimize(Hs) tries to drag out common subexpressions - but it produces output with 
variables "decorated" with _SAGE_VAR_ ...but we can strip that off via text replace

...result was long and messy - only the (manually) simplified expressions are shown below...

Define:

a2  = a^2
a3  = a^3
A   = (a+1)
A2  = (a+1)^2 =                 a^2 + 2*a + 1
A3  = (a+1)^3 =         a^3 + 3*a^2 + 3*a + 1
A4  = (a+1)^4 = a^4 + 4*a^3 + 6*a^2 + 4*a + 1
A4k = A4*k
U1  = (u-1)
U2  = (u-1)^2 = u^2 - 2*u^1 + 1
U3  = (u-1)^3 = u^3 - 3*u^2 + 3*u^1 - 1
U4  = (u-1)^4 = u^4 - 4*u^3 + 6*u^2 - 4*u + 1


Denominator:

D =
     A4k*u^4
-   (A4k*(4*u^4 - 4*u^3)               -   a^4)*z
+ 2*(A4k*(3*u^4 - 6*u^3 + 3*u^2)       + 2*a^3)*z^2
- 2*(A4k*(2*u^4 - 6*u^3 + 6*u^2 - 2*u) - 3*a^2)*z^3 
+   (A4k*(u-1)^4                       + 4*a  )*z^4 
+                                               z^5 

..try to factor (2*u^4 - 6*u^3 + 6*u^2 - 2*u), etc.



Numerator for G3:

- A3*u^3*z 
+ (A3*(3*a-1)*u^3 - 3*A3*u^2)*z^2
- 3*((a^4 + 2*a^3 - 2*a - 1)*u^3 - A3*(2*a-1)*u^2 + A3*u)*z^3
- (a^4 - A3*(a-3)*u^3 + 3*a^3 + 3*A3*(a-2)*u^2 + 3*a^2 - 3*A3*(a-1)*u + a)*z^4 
- (A3*u^3 - a^3 - 3*A3*u^2 - 3*a^2 + 3*A3*u - 3*a - 1)*z^5 

verify that! seems to hae a wrong gain...


 

Numerator for G4:



    A4*u^4    * z 
- 4*A4*u^3*U1 * z^2    
+ 6*A4*u^2*U2 * z^3     
- 4*A4*u  *U3 * z^4 
+   A4*    U4 * z^5 






















