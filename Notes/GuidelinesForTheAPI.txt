ToDo:
-make the API consistent with regard to 
 -naming conventions  
 -parameter ordering (for functions with similar parameter lists)
-maybe use nested namespaces like RAPT::Data, RAPT::Math, RAPT::Filters, etc. 
 to get the functionality more ordered and also to render a better doxygen 
 documentation
-anticipate using the C++20 module feature - don't use it just yet (we want to 
 remain C++11 compatible for a while), but organize the structure in a way that 
 makes it easy to switch to using modules later
 https://www.modernescpp.com/index.php/c-20-open-questions-to-modules
 https://vector-of-bool.github.io/2019/01/27/modules-doa.html
-maybe rename rosic to ramp (Rob's audio and music processors)
-in rapt (but maybe not in rosic) consistently use omega = 2*pi*freq/sampleRate 
 in filters instead of frequency and sampleRate which is a redundant and 
 inefficient parametrization (typically requires more computations to eventually 
 get the coeffs). in rosic, a freq-and-sampleRate parameterization can be kept as 
 convenience feature, but rapt is supposed to be more low-level and performance 
 oriented
-maybe split the member variables of filter implementations into a "state" and
 "coeffs" part to allow for easier optimization of memory usage on higher 
 levels. That may make a big difference especially when many filters with equal
 settings are used
-maybe preferably use /**< ... */ instead of /** ... */ for the doxygen stuff
 for member functions. It's just nicer when the function name appears as 
 "headline" above the docstring in the code. but check, if intellisense still 
 displays the docstrings when doing so. It also may not be so suitable for
 in-class function definitions (but maybe we should avoid them anyway unless
 they are one-liners - we can still put them in the header file after the class
 declaration to allow (or even demand) inlining)
 


Make the following things consistent:

Interface:
-class names (use prefix rs everywhere)
-function names:
 -have a getSample and processBlock function consistently in all DSP classes
 -if the module produces stereo samples, use processFrame - getSample is only
  for mono stuff ...maybe that makes it redundant but it is nice to be able to
  write things like:
    out = env.getSample() * filter.getSample(osc.getSample());
-consistently use pointers (not references) for output variables - makes it 
 visible in client code, what is an output
-the argument order should be consistent for functions that do similar things
 -especially in rsArray (dangerous change)
-the units (seconds, milliseconds) for parameters should be the same in all 
 classes (dangerous change)
 -in rapt, we should probably not deal with physical units at all and instead 
  use normalized units (samples, omega = 2*pi*f/fs, etc.)
-consistent use of enum class for choices  
-(maybe) avoid free functions - wrap them into namespaces - maybe use 
 sub-namespaces (RAPT::Filters, RAPT::Generators, etc.)
-i've been thinking about using std::vector for all i/o of the the non-realtime
 classes - but some client code may use something else, so plain arrays is most
 flexible - anyone can use it
-consistently make embedded objects accessible either via having them as public 
 members or by providing getters ...the former seems better - simpler client-side 
 syntax and does the exact same  thing
-use consistently int - not size_t or something (in the sinusoidal model)
 ...or maybe size_t is better - but then we need a convention other than -1 to 
 indicate things like "not found" in functions like findIndex - perhaps N would 
 be the most obvious convention (N = length of array) - that would also be 
 consistent with STL conventions
 https://github.com/fish-shell/fish-shell/issues/3493
-use get/set consistently bad: Matrix::eigenvalues, good: Matrix::getEigenvalues
 ...but only for non-static member functions - for static ones -> no get
-avoid heap allocations for temporary arrays - use workspace parameters instead
 but keep the functions that do heap allocations for convenience - but document 
 all heap-allocations, i.e. write a warning
-use nouns like "getProduct" when the function returns an object (numbers qualify 
 as well) but a verb like "multiply" when the function performs some action on 
 passed inputs like multiplying array element-wise

Implementation:
-whether algo parameters are updated directly in setCutoff, setResonance, etc.
 or are updated in getSample based on an "upToDate" flag should be consistent
 ...maybe that can be decided on a case-by-case basis....but maybe it shouldn't
 ...but enforced consistency may make it harder to optimize cases individually
-what about thread safety? should probably be completely abolished, at least in 
 rapt - synchronization should be dealt with on a higher level - maybe rosic, 
 but probably jura
-how polyphony is handled - each DSP class should have a simple, monophonic 
 implementation and some may optionally have a polyphonic version (maybe as 
 subclass with suffix "Poly")
 
Efficiency:
-use const and constexpr whereever possible
-always declare members in order of descencing size (reduces padding)
-use workspaces for operations on arrays that need auxiliary memory - and have
 convenience functions that allocate a workspace internally

Safety:
-if a pointer cannot be a nullptr, say so by using not_null


seems like #pragma once is not really recommended as replacement for include gurads - so we should
stick to them, fo rthe time being
https://stackoverflow.com/questions/1143936/pragma-once-vs-include-guards

this talk has interesting stuff about API design:
https://www.youtube.com/watch?v=5tg1ONG18H8
one thing: avoid adjacent parameters of the same type to minimize the chance of the caller getting
the order wrong

here are the guidelines recommended by the c++ commitee:
https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md

-"Modern c++" guidelines say, that we should avoid raw "new" and "delete" and use smart-pointers 
 instead std::unique_ptr, std::shared_ptr
 -try to do that, where reasonable (but always take potential performance degradation into account)
 -where not reasonable, convey information of ownership takeover in the respective function 
  names - instead of addChildFoo( new Foo ) use things like addOwnedChildFoo( new Foo )
 
-check use of std::list<> in rosic::PolymorphicIntrumentVoice

---------------------------------------------------------------------------------------------------
general guidelines:
a good api should be:
-easy to learn an memorize
-lead to readable client code 
 -library code readability should be sacrificed, if it leads to more readable client code
-hard to use incorrectly
-easy to extend
-complete

specific things to pay attention to
-edge cases:
 -sometimes they are handled automatically correct -> implement the general case first and test
  (and reason about) what that implementation will do in the edge case